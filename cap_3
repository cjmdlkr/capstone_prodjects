import os
from datetime import datetime, date

DATETIME_STRING_FORMAT = "%Y-%m-%d"

# Create tasks.txt if it doesn't exist
if not os.path.exists("tasks.txt"):
    with open("tasks.txt", "w") as default_file:
        pass

with open("tasks.txt", 'r') as task_file:
    task_data = task_file.read().split("\n")
    task_data = [t for t in task_data if t != ""]


task_list = []
for t_str in task_data:
    curr_t = {}

    # Split by semicolon and manually add each component
    task_components = t_str.split(";")
    curr_t['username'] = task_components[0]
    curr_t['title'] = task_components[1]
    curr_t['description'] = task_components[2]
    curr_t['due_date'] = datetime.strptime(task_components[3], DATETIME_STRING_FORMAT)
    curr_t['assigned_date'] = datetime.strptime(task_components[4], DATETIME_STRING_FORMAT)
    curr_t['completed'] = True if task_components[5] == "Yes" else False

    task_list.append(curr_t)


#====Login Section====
'''This code reads usernames and password from the user.txt file to 
    allow a user to login.
'''
# If no user.txt file, write one with a default account
if not os.path.exists("user.txt"):
    with open("user.txt", "w") as default_file:
        default_file.write("admin;password")

# Read in user_data
with open("user.txt", 'r') as user_file:
    user_data = user_file.read().split("\n")

# Convert to a dictionary
username_password = {}
for user in user_data:
    username, password = user.split(';')
    username_password[username] = password

logged_in = False
while not logged_in:

    print("LOGIN")
    curr_user = input("Username: ")
    curr_pass = input("Password: ")
    if curr_user not in username_password.keys():
        print("User does not exist")
        continue
    elif username_password[curr_user] != curr_pass:
        print("Wrong password")
        continue
    else:
        print("Login Successful!")
        logged_in = True

while True:
    # presenting the menu to the user and 
    # making sure that the user input is converted to lower case.
    print()
    menu = input('''Select one of the following Options below:
r - Registering a user
a - Adding a task
va - View all tasks
vm - View my task
gr - generate reports
ds - Display statistics
e - Exit
: ''').lower()
    if menu == 'r':
    #Add a new user to the user.txt file
            username_password = {}

    # Read existing users from the file
    with open("user.txt", "r") as in_file:
        for line in in_file:
            parts = line.strip().split(";")
            username_password[parts[0]] = parts[1]
    # Request input of a new username
    new_username = input("New Username: ")
    while new_username in username_password:
        print("Username already exists. Please choose a different username.")
        new_username = input("New Username: ")
    # Request input of a new password
    new_password = input("New Password: ")
    # Request input of password confirmation.
    confirm_password = input("Confirm Password: ")
    # Check if the new password and confirmed password are the same.
    if new_password == confirm_password:
        # If they are the same, add them to the user.txt file,
        print("New user added")
        username_password[new_username] = new_password

        with open("user.txt", "w") as out_file:
            user_data = []
            for k in username_password:
                user_data.append(f"{k};{username_password[k]}")
            out_file.write("\n".join(user_data))

    # Otherwise you present a relevant message.
    else:
        print("Passwords do not match")
        if menu == 'a':
            '''Allow a user to add a new task to task.txt file
                Prompt a user for the following: 
             - A username of the person whom the task is assigned to,
             - A title of a task,
             - A description of the task and 
             - the due date of the task.'''
    task_username = input("Name of person assigned to task: ")
    if task_username not in username_password.keys():
            print("User does not exist. Please enter a valid username")
            continue
    task_title = input("Title of Task: ")
    task_description = input("Description of Task: ")
    while True:
            try:
                task_due_date = input("Due date of task (YYYY-MM-DD): ")
                due_date_time = datetime.strptime(task_due_date, DATETIME_STRING_FORMAT)
                break

            except ValueError:
                print("Invalid datetime format. Please use the format specified")


        # Then get the current date.
    curr_date = date.today()
    ''' Add the data to the file task.txt and
            Include 'No' to indicate if the task is complete.'''
    new_task = {
            "username": task_username,
            "title": task_title,
            "description": task_description,
            "due_date": due_date_time,
            "assigned_date": curr_date,
            "completed": False
        }

    task_list.append(new_task)
    with open("tasks.txt", "w") as task_file:
            task_list_to_write = []
            for t in task_list:
                str_attrs = [
                    t['username'],
                    t['title'],
                    t['description'],
                    t['due_date'].strftime(DATETIME_STRING_FORMAT),
                    t['assigned_date'].strftime(DATETIME_STRING_FORMAT),
                    "Yes" if t['completed'] else "No"
                ]
                task_list_to_write.append(";".join(str_attrs))
            task_file.write("\n".join(task_list_to_write))
    print("Task successfully added.")


    if menu == 'va':
        '''Reads the task from task.txt file and prints to the console in the 
           format of Output 2 presented in the task pdf (i.e. includes spacing
           and labelling) 
        '''

    for t in task_list:
            disp_str = f"Task: \t\t {t['title']}\n"
            disp_str += f"Assigned to: \t {t['username']}\n"
            disp_str += f"Date Assigned: \t {t['assigned_date'].strftime(DATETIME_STRING_FORMAT)}\n"
            disp_str += f"Due Date: \t {t['due_date'].strftime(DATETIME_STRING_FORMAT)}\n"
            disp_str += f"Task Description: \n {t['description']}\n"
            print(disp_str)
            


    if menu == 'vm':
        '''Reads the task from task.txt file and prints to the console in the 
           format of Output 2 presented in the task pdf (i.e. includes spacing
           and labelling)
        '''
        print("Task list\n")
        for i, t in enumerate(task_list):
            if t['username'] == curr_user:
                disp_str = f"Task number: \t (i)\n"
                disp_str += f"Task: \t\t {t['title']}\n"
                disp_str += f"Assigned to: \t {t['username']}\n"
                disp_str += f"Date Assigned: \t {t['assigned_date'].strftime(DATETIME_STRING_FORMAT)}\n"
                disp_str += f"Due Date: \t {t['due_date'].strftime(DATETIME_STRING_FORMAT)}\n"
                disp_str += f"Task Description: \n {t['description']}\n"
                print(disp_str)
        print("\nEnter a task number to edit or mark as complete, enter -1 to return to the main menu.\n")        
        task_num = input ("Task number: ")
        if task_num == "-1":
            continue
        else:
            task_num = int(task_num)
            selected_task = task_list[task_num]
            print(f"\nSelected Task: {selected_task['title']}")
            print("1. Mark as Complete\n2. Edit Task\n")
            choice = input("Choice: ")
            if choice == "1":
                selected_task['completed'] = "Yes"
                print("Task marked as complete!")
            elif choice == "2":
                print(f"\nAssigned to: {selected_task['username']}")
                print(f"Task Description: \n{selected_task['description']}\n")
                print("Enter 'u' to update the user assigned to the task or 'd' to update the description.")
                choice = input("Choice: ")
                if choice == "u":
                    new_user = input("Enter new username: ")
                    selected_task['username'] = new_user
                    print("User assigned to the task has been updated!")
                elif choice == "d":
                    new_desc = input("Enter new description: ")
                    selected_task['description'] = new_desc
                    print("Task description has been updated!")
                else:
                    print("Invalid choice!")    
        
            tasks = []
            completed_tasks = []
            uncompleted_tasks = []
            overdue_tasks = []
    if menu == 'gr':
        def generate_task_overview():
            """Generates a text file containing an overview of all tasks."""
            with open("task_overview.txt", "w") as f:
                f = open("task_overview.txt", "w")
                f.write("Total number of tasks: " + str(len(tasks)) + "\n")
                f.write("Total number of completed tasks: " + str(len(completed_tasks)) + "\n")
                f.write("Total number of uncompleted tasks: " + str(len(uncompleted_tasks)) + "\n")
                f.write("Total number of overdue tasks: " + str(len(overdue_tasks)) + "\n")
                f.write("Percentage of tasks that are incomplete: " + str(round(100 * len(uncompleted_tasks) / len(tasks), 2)) + "%\n")
                f.write("Percentage of tasks that are overdue: " + str(round(100 * len(overdue_tasks) / len(tasks), 2)) + "%\n")
                f.close()
        def generate_user_overview():
            """Generates a text file containing an overview of all users."""
            
            for user in curr_user:
                f = open("task_overview.txt", "w")
                f.write("User name: " + curr_user.name + "\n")
                f.write("Number of tasks assigned: " + str(len(user.tasks)) + "\n")
                f.write("Percentage of tasks completed: " + str(round(100 * len(user.completed_tasks) / len(user.tasks), 2)) + "%\n")
                f.close()
    def main():
           
        if menu == 'ds' and curr_user == 'admin': 
            '''If the user is an admin they can display statistics about number of users
            and tasks.'''
    num_users = len(username_password.keys())
    num_tasks = len(task_list)

    print("-----------------------------------")
    print(f"Number of users: \t\t {num_users}")        
    print(f"Number of tasks: \t\t {num_tasks}")
    print("-----------------------------------")    

    P = "Please enter a valid choice."

    if menu == 'e':
        print('Goodbye!!!')
        exit()

    else:
        print("You have made a wrong choice, " + P)
